import bpy, math
from math import sin, cos
from mathutils import Vector

# clean up the initial workspace
#
try:
    bpy.data.objects['Cube'].select = True
    bpy.ops.object.delete() 
except: 
    pass

# open and load the beat times information
#
beatData = []

beatFile = open('C:\\beat_frames.lfa','r')
for line in beatFile.readlines():
    beatData.extend(line.split())
beatFile.close()

beatFrames = []
beats = 0
for i in range(len(beatData)):
    tmp = beatData[i]
    beatTimes.append(float(tmp))
    beats = beats + 1
    beatFrames.append(int(beatTimes[beats-1]*24))

print("")
print("")
print("Beats Finished Importing")
print("Beats: " + str(beatFrames[beats-1]))

# open and load the mel volume information
#
volumeData = []
volumeFile = open('C:\\1_bin_mel.lfa','r')
for line in volumeFile.readlines():
    volumeData.extend(line.split())
volumeFile.close()

# open and load 8 channel mel information
#
8binMelData = []

melFile = open('C:\\8_bin_mel.lfa','r')
for line in melFile.readlines():
    8binMelData.append(line.split())
melFile.close()

maxFrames = len(8binMelData)

print("Mel Finished Importing")
print("Mel Frames: " + str(maxFrames))
print("Mel Bins: " + str(len(melData[1])))

# setup some basic parameters before creating/animating objects
#
objectName = 'CustomObject'

scn = bpy.context.scene
scn.frame_end = maxFrames

origin = Vector().zero()
meshLoc = Vector().zero()

(varA,varB,varC) = (0.5, 1.0, 2.0)
faces = ((1,0,4), (4,2,1), (4,3,2), (4,0,3), (0,1,2,3))
verts = (((varA),varA,0), ((varA),-varA,0), ((-varA),-varA,0), ((-varA),varA,0), (0,0,1))

#sys.exit("This will stop the script!")

for i in range(-4,4):
    
    # let the user know which object is being worked on
    #
    print("")
    print("Object being animated: " + str(i+4))

    # setup the object mesh and material and insert into scene
    #
    me = bpy.data.meshes.new(objectName+'Mesh'+str(i+4))
    ob = bpy.data.objects.new(objectName + str(i+4), me)

    mat = bpy.data.materials.new("CustomColor" + str(i+4))
    mat.diffuse_color = (1,1,1)
    ob.active_material = mat

    scn.objects.link(ob)
    scn.objects.active = ob

    objectSpacing = (2*i,0,0)
    ob.location = objectSpacing
    ob.show_name = False
    me.from_pydata(verts, [], faces)
    me.update()
    
    # script the animation for each object
    #
    for frameNumber in range (1,maxFrames):

        # set the object scaling and write a keyframe (SCALING PIPES)
        #
        scaleX = 1

        scaleY = float(volumeData[frameNumber])/8

        scaleZ = ((8binMelData[frameNumber])[(i+4)])
        scaleZ = (float(scaleZ))/8

        ob.scale = (scaleX, scaleY, scaleZ)

        ob.keyframe_insert(data_path="scale", index = 1, frame =frameNumber)
        ob.keyframe_insert(data_path="scale", index = 2, frame =frameNumber)
        ob.keyframe_insert(data_path="scale", index = 3, frame =frameNumber)

        # set the object color and write a keyframe (COLOR PIPES)
        #
        colRed =   ( sin(frameNumber/100)   +1)/2
        colGreen = ( cos(frameNumber/100)   +1)/2
        colBlue =  ( sin(frameNumber*i/50)  +1)/2

        mat.diffuse_color = (colRed,colGreen,colBlue)
        
        mat.keyframe_insert(data_path="diffuse_color", frame=frameNumber, index=-1)

        # print out some information about the rendering process
        #
        if(frameNumber%1000==0):
            print("Frame " + str(frameNumber) + " finished...")
    
    # print out some information about the rendering process and forget about the finished object
    #
    print("Object " + str(i+4) + " finished, with " + str(maxFrames) + " frames keyed.")
    ob.select = False